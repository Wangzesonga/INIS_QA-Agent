Dear Zesong,
 
Please see this script below ‚Äì it takes the recommendations and makes the title, affiliation, and organizational author changes. These are the ones I trust it to do. So, after the email generating script runs, please run this which will make the corrections. You‚Äôll have to get a token for production if you don‚Äôt have one already:
 
import os
import sys
import json
import subprocess
 
# === Configuration ===
ACCESS_TOKEN = "#######"
BASE_URL = https://inis.iaea.org/api/records
QA_FOLDER = r"E:\QA"  # Set your folder path here
DRY_RUN = "--apply" not in sys.argv
 
print("** DRY RUN MODE **" if DRY_RUN else "** APPLYING CHANGES **", flush=True)
 
def curl_get(url):
    cmd = ['curl', '-s', '-H', f'Authorization: Bearer {ACCESS_TOKEN}', url]
    result = subprocess.run(cmd, stdout=subprocess.PIPE)
    return json.loads(result.stdout)
 
def curl_post(url):
    cmd = ['curl', '-s', '-X', 'POST', '-H', f'Authorization: Bearer {ACCESS_TOKEN}', url]
    result = subprocess.run(cmd, stdout=subprocess.PIPE)
    return json.loads(result.stdout)
 
def curl_put(url, payload):
    cmd = [
        'curl', '-s', '-X', 'PUT',
        '-H', f'Authorization: Bearer {ACCESS_TOKEN}',
        '-H', 'Content-Type: application/json',
        '--data-binary', json.dumps(payload),
        url
    ]
    result = subprocess.run(cmd, stdout=subprocess.PIPE)
    return result.stdout.decode('utf-8')
 
def update_record(rec_id, corrections):
    draft_url = f"{BASE_URL}/{rec_id}/draft"
    print(f"\nProcessing {rec_id}...", flush=True)
 
    # Create draft
    draft_resp = curl_post(draft_url)
    if 'id' not in draft_resp:
        print(f"‚ùå Failed to create draft for {rec_id}")
        return
 
    full_draft = curl_get(draft_url)
 
    # === Title update ===
    if "title" in corrections.get("corrections", {}):
        new_title = corrections["corrections"]["title"]
        full_draft["metadata"]["title"] = new_title
        print(f"‚úèÔ∏è  Updated title")
 
    # === Affiliation update ===
    aff_corrections = corrections.get("affiliation_corrections", [])
    for author in full_draft.get("metadata", {}).get("creators", []):
        aff_list = author.get("affiliations", [])
        for aff in aff_list:
            for aff_corr in aff_corrections:
                if aff["name"] == aff_corr["old_affiliation"]:
                    aff["name"] = aff_corr["recommended_affiliation"]
                    print(f"üè∑Ô∏è  Updated affiliation: {aff_corr['old_affiliation']}")
 
    # === Organizational author update ===
    org_corrections = corrections.get("organizational_author_corrections", [])
    for creator in full_draft.get("metadata", {}).get("creators", []):
        person = creator.get("person_or_org", {})
        if person.get("type") == "organizational":
            for org_corr in org_corrections:
                if person.get("name") == org_corr["old_organizational_author"]:
                    person["name"] = org_corr["recommended_organizational_author"]
                    print(f"üè¢ Updated org author: {org_corr['old_organizational_author']}")
 
    # Mark QA
    if "custom_fields" not in full_draft:
        full_draft["custom_fields"] = {}
    full_draft["custom_fields"]["iaea:qa_checked"] = True
 
    if not DRY_RUN:
        put_resp = curl_put(draft_url, full_draft)
        publish_url = f"{draft_url}/actions/publish"
        pub_resp = curl_post(publish_url)
        if "id" in pub_resp:
            print(f"‚úÖ Published {rec_id}")
        else:
            print(f"‚ùå Failed to publish {rec_id}: {pub_resp}")
    else:
        print("Dry-run: Changes not applied.")
 
def main():
    for fname in os.listdir(QA_FOLDER):
        if not fname.endswith(".json"):
            continue
        with open(os.path.join(QA_FOLDER, fname), encoding="utf-8") as f:
            try:
                report = json.load(f)
                rec_id = report.get("record_id")
                if rec_id:
                    update_record(rec_id, report)
                else:
                    print(f"‚ö†Ô∏è No record_id in {fname}")
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è Invalid JSON in {fname}")
 
if __name__ == "__main__":
    main()